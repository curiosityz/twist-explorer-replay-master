
/**
 * Transaction processing and analysis controller
 */

import { AnalysisResult } from '@/types';
import { toast } from 'sonner';
import { chainstackService } from '@/services/chainstackService';
import { 
  checkExistingAnalysis, 
  fetchAnalysisForTransaction, 
  loadAnalysisById 
} from './databaseOperations';
import { performAnalysis } from './index';
import { prepareAnalysisResult } from '../analysisUtils';

/**
 * Analyzes transaction for potential vulnerabilities
 * @param txid Transaction ID to analyze
 * @returns Analysis result or null if analysis failed
 */
export const analyzeTransaction = async (txid: string): Promise<AnalysisResult | null> => {
  try {
    // Check if an analysis already exists
    const existingAnalysis = await checkExistingAnalysis(txid);
    
    if (existingAnalysis && existingAnalysis.vulnerability_type !== 'unknown') {
      // Parse existing analysis result
      const preparedResult = prepareAnalysisResult(existingAnalysis);
      if (preparedResult) {
        console.log("Found existing analysis:", preparedResult.vulnerabilityType);
        return preparedResult;
      }
    }
    
    // Perform real-time analysis on the blockchain data
    toast.loading("Analyzing transaction for vulnerabilities...", {
      id: "analyzing-transaction"
    });
    
    try {
      // Fetch the transaction data from the blockchain via API
      console.log("Fetching transaction data for:", txid);
      const txData = await chainstackService.getTransaction(txid);
      
      if (!txData) {
        toast.dismiss("analyzing-transaction");
        toast.error("Failed to fetch transaction data", { 
          description: "Could not retrieve the transaction from the blockchain" 
        });
        throw new Error("Failed to retrieve transaction data");
      }
      
      console.log("Successfully retrieved transaction data");
      
      // Perform the actual analysis
      return await performAnalysis(txid, txData);
    } catch (error) {
      console.error("Error in blockchain analysis:", error);
      toast.dismiss("analyzing-transaction");
      toast.error("Failed to analyze blockchain data", {
        description: error instanceof Error ? error.message : "Unknown error"
      });
      
      throw error;
    }
  } catch (error) {
    console.error('Error analyzing transaction:', error);
    toast.dismiss("analyzing-transaction");
    toast.error("Failed to analyze transaction");
    throw error;
  }
};

/**
 * Fetches an existing analysis by ID
 * @param analysisId Analysis ID to fetch
 * @returns Analysis result or null if not found
 */
export const fetchAnalysisById = async (analysisId: string): Promise<AnalysisResult | null> => {
  return await loadAnalysisById(analysisId);
};

/**
 * Re-export fetchAnalysisForTransaction for backward compatibility
 */
export { fetchAnalysisForTransaction };
