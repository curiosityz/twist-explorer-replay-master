
import { solveDiscreteLog } from '../crypto/discreteLogUtils';

/**
 * Calculate the private key modulo for each prime factor
 * @param primeFactors Array of prime factors as strings
 * @param point Public key point as [x, y]
 * @returns Object mapping factor to remainder
 */
export const calculatePrivateKeyModulo = (
  primeFactors: string[], 
  point: [bigint, bigint]
): Record<string, string> => {
  const moduli: Record<string, string> = {};
  
  // For each prime factor, solve the discrete logarithm problem
  for (const factorStr of primeFactors) {
    const factor = BigInt(factorStr);
    
    // Solve the discrete logarithm (d â‰¡ x mod p) using our improved implementation
    const remainder = solveDiscreteLog(point, factor);
    
    if (remainder !== null) {
      moduli[factorStr] = remainder;
      console.log(`Found remainder for modulus ${factorStr}: ${remainder}`);
    }
  }
  
  return moduli;
};
