/**
 * Main export file for cryptographic data extraction utilities
 */

import { checkBitcoinLibsLoaded } from '@/lib/crypto/bitcoin-libs/check-status';
import { extractP2PKHData } from './p2pkh';
import { extractSegWitData } from './segwit';
import { extractHexData, bytesToHex, hexToBytes } from './hexUtils';

/**
 * Extract cryptographic data (public key and signature) from transaction
 * @param txData Transaction data from blockchain API
 * @returns Object containing public key and signature if found, or null if not found
 */
export const extractCryptographicData = (txData: any) => {
  try {
    console.log("Starting cryptographic data extraction...");
    
    if (!txData) {
      console.error("Cannot extract data: Transaction data is null or undefined");
      return null;
    }
    
    // First check if Bitcoin libraries are available for optimal extraction
    const libsCheck = checkBitcoinLibsLoaded();
    console.log("Found Bitcoin libraries:", libsCheck);
    
    // Make a copy of the transaction data to avoid reference issues
    let txDataCopy: any;
    try {
      txDataCopy = typeof txData === 'object' ? 
        JSON.parse(JSON.stringify(txData)) : 
        (typeof txData === 'string' ? JSON.parse(txData) : txData);
    } catch (parseError) {
      console.error("Failed to parse/copy transaction data:", parseError);
      txDataCopy = txData; // Use as-is if parsing fails
    }
    
    // Log transaction structure to help debug
    console.log("Transaction structure:", {
      txid: txDataCopy?.txid || txDataCopy?.hash || "unknown",
      inputCount: txDataCopy?.vin?.length || 0,
      version: txDataCopy?.version,
      format: txDataCopy?.decoded_json ? "stored" : "direct"
    });
    
    // If txData includes a decoded_json property, use that instead
    if (txDataCopy?.decoded_json && typeof txDataCopy.decoded_json === 'string') {
      try {
        txDataCopy = JSON.parse(txDataCopy.decoded_json);
        console.log("Using parsed decoded_json data");
      } catch (jsonError) {
        console.error("Failed to parse decoded_json:", jsonError);
      }
    } else if (txDataCopy?.decoded_json && typeof txDataCopy.decoded_json === 'object') {
      txDataCopy = txDataCopy.decoded_json;
      console.log("Using decoded_json object data");
    }
    
    // Handle blockchain.info specific format
    if (txDataCopy?.inputs && Array.isArray(txDataCopy.inputs) && txDataCopy.out && Array.isArray(txDataCopy.out)) {
      console.log("Detected blockchain.info format, converting to standard format");
      txDataCopy = {
        txid: txDataCopy.hash,
        version: txDataCopy.ver,
        vin: txDataCopy.inputs.map((input: any) => ({
          txid: input.prev_out?.hash,
          vout: input.prev_out?.n,
          scriptSig: {
            hex: input.script
          },
          txinwitness: input.witness ? [input.witness] : undefined
        })),
        vout: txDataCopy.out.map((output: any, index: number) => ({
          n: index,
          scriptPubKey: {
            hex: output.script
          },
          value: output.value / 100000000 // Convert satoshis to BTC
        }))
      };
    }
    
    // Check if this is a SegWit transaction by looking for witness data
    // Enhanced detection logic for various witness formats
    const hasWitness = txDataCopy?.vin && 
                       Array.isArray(txDataCopy.vin) && 
                       txDataCopy.vin.some((input: any) => {
                         // Check all possible witness field names and formats
                         return (input.txinwitness && Array.isArray(input.txinwitness) && input.txinwitness.length > 0) || 
                                (input.witness && (Array.isArray(input.witness) || typeof input.witness === 'string') && 
                                 ((Array.isArray(input.witness) && input.witness.length > 0) || 
                                  (typeof input.witness === 'string' && input.witness.length > 0))) ||
                                (input.scriptWitness && Array.isArray(input.scriptWitness) && input.scriptWitness.length > 0);
                       });
    
    console.log("Has witness data:", hasWitness || false);
    
    // Try SegWit extraction first if witness data is present (higher priority)
    if (hasWitness) {
      console.log("Found witness data, attempting SegWit extraction...");
      try {
        const segwitData = extractSegWitData(txDataCopy);
        if (segwitData) {
          console.log("SegWit extraction successful");
          return segwitData;
        } else {
          console.log("SegWit extraction failed despite finding witness data");
        }
      } catch (segwitError) {
        console.error("Error in SegWit extraction:", segwitError);
      }
    }
    
    // Try P2PKH extraction next
    console.log("Attempting P2PKH data extraction...");
    try {
      const p2pkhData = extractP2PKHData(txDataCopy);
      if (p2pkhData) {
        console.log("P2PKH extraction successful");
        return p2pkhData;
      }
    } catch (p2pkhError) {
      console.error("Error in P2PKH extraction:", p2pkhError);
    }
    
    // Try raw hex extraction as a last resort
    console.log("P2PKH extraction failed, attempting raw hex extraction...");
    try {
      const hexData = extractHexData(txDataCopy);
      if (hexData) {
        console.log("Raw hex extraction successful");
        return hexData;
      }
    } catch (hexError) {
      console.error("Error in hex extraction:", hexError);
    }
    
    // If we get here, all extraction methods failed
    console.error("All extraction methods failed - could not extract cryptographic data");
    console.log("Transaction data structure:", 
      JSON.stringify(Object.keys(txDataCopy)).substring(0, 500));
    
    // Could not extract data from any known format
    return null;
  } catch (error) {
    console.error("Error in cryptographic data extraction process:", error);
    return null;
  }
};

/**
 * Check if required Bitcoin libraries are loaded for extraction functions
 * @returns Boolean indicating if all required libraries are available
 */
export const checkExtractionLibraries = (): boolean => {
  const libsCheck = checkBitcoinLibsLoaded();
  if (!libsCheck.loaded) {
    console.error(`Bitcoin libraries required for extraction not loaded: Missing ${libsCheck.missing.join(', ')}`);
    return false;
  }
  return true;
};

// Re-export extraction utilities
export { extractP2PKHData } from './p2pkh';
export { extractSegWitData } from './segwit';
export { extractHexData, bytesToHex, hexToBytes } from './hexUtils';
