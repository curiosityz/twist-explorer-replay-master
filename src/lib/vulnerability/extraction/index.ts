
/**
 * Main export file for cryptographic data extraction utilities
 */

import { checkBitcoinLibsLoaded } from '@/lib/crypto/bitcoin-libs/check-status';
import { extractP2PKHData } from './p2pkh';
import { extractSegWitData } from './segwit';
import { extractHexData, bytesToHex, hexToBytes } from './hexUtils';

/**
 * Extract cryptographic data (public key and signature) from transaction
 * @param txData Transaction data from blockchain API
 * @returns Object containing public key and signature if found, or null if not found
 */
export const extractCryptographicData = (txData: any) => {
  try {
    console.log("Starting cryptographic data extraction...");
    
    // First check if Bitcoin libraries are available for optimal extraction
    const libsCheck = checkBitcoinLibsLoaded();
    console.log("Found Bitcoin libraries:", libsCheck);
    
    // Make a copy of the transaction data to avoid reference issues
    const txDataCopy = typeof txData === 'object' ? 
      JSON.parse(JSON.stringify(txData)) : txData;
    
    // Check if this is a SegWit transaction by looking for witness data
    // This is a more comprehensive check that looks at multiple witness field names
    const hasWitness = txDataCopy?.vin && 
                       Array.isArray(txDataCopy.vin) && 
                       txDataCopy.vin.some((input: any) => {
                         // Check all possible witness field names
                         return (input.txinwitness && Array.isArray(input.txinwitness) && input.txinwitness.length > 0) || 
                                (input.witness && Array.isArray(input.witness) && input.witness.length > 0) || 
                                (input.scriptWitness && Array.isArray(input.scriptWitness) && input.scriptWitness.length > 0) ||
                                // Some blockchain APIs store the witness inside the script field for compatibility
                                (input.script && typeof input.script === 'object' && input.script.witness);
                       });
    
    // Log detailed information about the transaction for debugging
    console.log("Transaction structure:", {
      txid: txDataCopy.txid || "unknown",
      inputCount: txDataCopy.vin?.length || 0,
      witnessDetected: hasWitness || false,
      p2pkhDetected: txDataCopy.vin?.some((vin: any) => vin.scriptSig?.hex) || false
    });
    
    // Try SegWit extraction first if witness data is present (higher priority)
    if (hasWitness) {
      console.log("Found witness data, attempting SegWit extraction...");
      const segwitData = extractSegWitData(txDataCopy);
      if (segwitData) {
        console.log("SegWit extraction successful");
        return segwitData;
      } else {
        console.log("SegWit extraction failed despite finding witness data");
      }
    }
    
    // Try P2PKH extraction next
    console.log("Attempting P2PKH data extraction...");
    const p2pkhData = extractP2PKHData(txDataCopy);
    if (p2pkhData) {
      console.log("P2PKH extraction successful");
      return p2pkhData;
    }
    
    // Try raw hex extraction as a last resort
    console.log("P2PKH extraction failed, attempting raw hex extraction...");
    const hexData = extractHexData(txDataCopy);
    if (hexData) {
      console.log("Raw hex extraction successful");
      return hexData;
    }
    
    // If we get here, all extraction methods failed
    console.error("All extraction methods failed - could not extract cryptographic data");
    console.log("Transaction data structure:", 
      JSON.stringify(typeof txData === 'object' ? Object.keys(txData) : txData).substring(0, 500));
    
    // Could not extract data from any known format
    return null;
  } catch (error) {
    console.error("Error in cryptographic data extraction process:", error);
    return null;
  }
};

/**
 * Check if required Bitcoin libraries are loaded for extraction functions
 * @returns Boolean indicating if all required libraries are available
 */
export const checkExtractionLibraries = (): boolean => {
  const libsCheck = checkBitcoinLibsLoaded();
  if (!libsCheck.loaded) {
    console.error(`Bitcoin libraries required for extraction not loaded: Missing ${libsCheck.missing.join(', ')}`);
    return false;
  }
  return true;
};

// Re-export extraction utilities
export { extractP2PKHData } from './p2pkh';
export { extractSegWitData } from './segwit';
export { extractHexData, bytesToHex, hexToBytes } from './hexUtils';
