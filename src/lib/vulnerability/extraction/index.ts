
/**
 * Main export file for cryptographic data extraction utilities
 */

import { checkBitcoinLibsLoaded } from '@/lib/crypto/bitcoinLibsCheck';
import { extractP2PKHData } from './p2pkh';
import { extractSegWitData } from './segwit';
import { extractHexData } from './hexUtils';

/**
 * Extract cryptographic data (public key and signature) from transaction
 * @param txData Transaction data from blockchain API
 * @returns Object containing public key and signature if found, or null if not found
 */
export const extractCryptographicData = (txData: any) => {
  try {
    console.log("Starting cryptographic data extraction...");
    
    // First check if Bitcoin libraries are available for optimal extraction
    const libsCheck = checkBitcoinLibsLoaded();
    if (!libsCheck.loaded) {
      console.warn(`Some Bitcoin libraries not loaded: Missing ${libsCheck.missing.join(', ')}. Using fallback methods.`);
    }
    
    // Make a copy of the transaction data to avoid reference issues
    const txDataCopy = JSON.parse(JSON.stringify(txData));
    
    // Try P2PKH extraction first (most common)
    console.log("Attempting P2PKH data extraction...");
    const p2pkhData = extractP2PKHData(txDataCopy);
    if (p2pkhData) {
      console.log("P2PKH extraction successful");
      return p2pkhData;
    }
    
    // Try SegWit extraction next
    console.log("P2PKH extraction failed, attempting SegWit extraction...");
    const segwitData = extractSegWitData(txDataCopy);
    if (segwitData) {
      console.log("SegWit extraction successful");
      return segwitData;
    }
    
    // Try raw hex extraction as a last resort
    console.log("SegWit extraction failed, attempting raw hex extraction...");
    const hexData = extractHexData(txDataCopy);
    if (hexData) {
      console.log("Raw hex extraction successful");
      return hexData;
    }
    
    // If we get here, all extraction methods failed
    console.error("All extraction methods failed - could not extract cryptographic data");
    
    // Could not extract data from any known format
    return null;
  } catch (error) {
    console.error("Error in cryptographic data extraction process:", error);
    return null;
  }
};

/**
 * Check if required Bitcoin libraries are loaded for extraction functions
 * @returns Boolean indicating if all required libraries are available
 */
export const checkExtractionLibraries = (): boolean => {
  const libsCheck = checkBitcoinLibsLoaded();
  if (!libsCheck.loaded) {
    console.error(`Bitcoin libraries required for extraction not loaded: Missing ${libsCheck.missing.join(', ')}`);
    return false;
  }
  return true;
};

// Re-export extraction utilities
export { extractP2PKHData } from './p2pkh';
export { extractSegWitData } from './segwit';
export { extractHexData } from './hexUtils';
