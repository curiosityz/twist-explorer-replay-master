
import { CryptographicPoint, Signature } from '@/types';
import { extractP2PKHData } from './p2pkhExtractor';
import { extractSegWitData } from './segwitExtractor';
import { decodeDERSignature } from '@/lib/crypto/bitcoinUtilities';

/**
 * Global type for BitcoinJS library
 */
declare global {
  interface Window {
    Bitcoin: any;
    bs58: any;
    bip39: any;
    bech32: any;
    secp256k1: any;
    bitcoinMessage: any;
    bitcoinOps: any;
    bitcoinAddressValidation: any;
  }
}

/**
 * Extract signature and public key from transaction data
 * @param txData Transaction data from RPC
 * @returns Extracted cryptographic data or null
 */
export const extractCryptographicData = (txData: any) => {
  try {
    if (!txData) {
      console.log("No transaction data provided");
      return null;
    }
    
    if (!txData.vin || !Array.isArray(txData.vin) || txData.vin.length === 0) {
      console.log("No inputs found in transaction data");
      return null;
    }

    console.log(`Transaction inputs: ${txData.vin.length}`);
    console.log("Transaction data structure:", JSON.stringify(txData).substring(0, 500) + "...");
    
    // Try to extract signature and public key from each input
    for (const input of txData.vin) {
      let result: { signature: Signature, publicKey: CryptographicPoint } | null = null;
      
      try {
        // Case 1: P2PKH input with scriptSig (legacy)
        if (input.scriptSig && input.scriptSig.hex) {
          console.log("Processing P2PKH input with scriptSig");
          result = extractP2PKHData(input.scriptSig.hex);
        } 
        // Case 2: P2WPKH or P2WSH with witness data (segwit)
        else if (input.txinwitness && Array.isArray(input.txinwitness) && input.txinwitness.length >= 2) {
          console.log("Processing P2WPKH/P2WSH input with witness data");
          result = extractSegWitData(input.txinwitness);
        }
        
        // If extraction succeeded, return the result
        if (result) {
          console.log("Successfully extracted cryptographic data");
          return result;
        }
      } catch (inputError) {
        console.error("Error processing input:", inputError);
        // Continue to next input
      }
    }
    
    console.log("Failed to extract cryptographic data from any inputs");
    throw new Error("Could not extract cryptographic data from transaction");
  } catch (error) {
    console.error("Error extracting cryptographic data:", error);
    throw new Error("Could not extract cryptographic data from transaction");
  }
};

/**
 * Re-export all extraction utilities
 */
export * from './p2pkhExtractor';
export * from './segwitExtractor';
export * from './hexUtils';
