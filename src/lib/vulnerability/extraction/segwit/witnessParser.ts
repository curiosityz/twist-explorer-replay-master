
/**
 * Utilities for parsing SegWit witness data
 */

import { bytesToHex } from '../hexUtils';

/**
 * Parse witness data from a SegWit transaction input
 * @param witnessData Array of witness items
 * @returns Object with signature and public key hex strings
 */
export const parseWitnessData = (witnessData: string[]): { 
  sigHex: string; 
  pubKeyHex: string;
} | null => {
  try {
    // Basic validation
    if (!witnessData || !Array.isArray(witnessData) || witnessData.length < 2) {
      console.log("Invalid witness data format");
      return null;
    }
    
    // In most standard P2WPKH, witness has [signature, pubkey]
    const sigHex = witnessData[0];
    const pubKeyHex = witnessData[1];
    
    // Validate data format
    if (typeof sigHex !== 'string' || typeof pubKeyHex !== 'string') {
      console.error("Witness data items are not strings");
      return null;
    }
    
    return { sigHex, pubKeyHex };
  } catch (error) {
    console.error("Error parsing witness data:", error);
    return null;
  }
};

/**
 * Extract signature bytes from hex string
 * @param sigHex Signature in hex format
 * @returns Signature as Uint8Array
 */
export const getSignatureBytes = (sigHex: string): Uint8Array | null => {
  try {
    if (!sigHex || typeof sigHex !== 'string') {
      console.error("Invalid signature hex");
      return null;
    }
    
    // Convert hex to bytes
    const sigBytes = new Uint8Array(
      sigHex.match(/.{1,2}/g)!.map(byte => parseInt(byte, 16))
    );
    
    return sigBytes;
  } catch (error) {
    console.error("Error converting signature hex to bytes:", error);
    return null;
  }
};

/**
 * Extract public key bytes from hex string
 * @param pubKeyHex Public key in hex format
 * @returns Public key as Uint8Array
 */
export const getPublicKeyBytes = (pubKeyHex: string): Uint8Array | null => {
  try {
    if (!pubKeyHex || typeof pubKeyHex !== 'string') {
      console.error("Invalid public key hex");
      return null;
    }
    
    // Convert hex to bytes
    const pubKeyBytes = new Uint8Array(
      pubKeyHex.match(/.{1,2}/g)!.map(byte => parseInt(byte, 16))
    );
    
    return pubKeyBytes;
  } catch (error) {
    console.error("Error converting public key hex to bytes:", error);
    return null;
  }
};

/**
 * Convert bytes to hex string
 * @param bytes Array or buffer of bytes
 * @returns Hex string representation
 */
export const toHexString = (bytes: Uint8Array | number[]): string => {
  return bytesToHex(bytes);
};
