
/**
 * Parser for segwit witness data
 */

import { checkBitcoinLibsLoaded } from '@/lib/crypto/bitcoinLibsCheck';
import { hexToBytes } from '../hexUtils';

/**
 * Validate and parse segwit witness data
 * @param witnessData Array of witness data from transaction
 * @returns Object containing signature and public key hex or null
 */
export const parseWitnessData = (witnessData: string[]): { sigHex: string, pubKeyHex: string } | null => {
  try {
    // Check if libraries are loaded
    const libsCheck = checkBitcoinLibsLoaded();
    if (!libsCheck.loaded) {
      console.error(`Bitcoin libraries not loaded: Missing ${libsCheck.missing.join(', ')}`);
      throw new Error(`Bitcoin libraries not loaded: Missing ${libsCheck.missing.join(', ')}`);
    }
    
    if (!witnessData || witnessData.length < 2) {
      console.log("Insufficient witness data");
      return null;
    }
    
    // Log the witness data for debugging
    console.log("Processing witness data:", witnessData);
    
    const sigHex = witnessData[0];
    const pubKeyHex = witnessData[1];
    
    if (!sigHex || !pubKeyHex) {
      console.log("Missing signature or public key in witness data");
      return null;
    }
    
    // Safety checks
    if (sigHex.length < 10 || pubKeyHex.length < 10) {
      console.log("Invalid signature or public key length in witness data");
      return null;
    }
    
    return { sigHex, pubKeyHex };
  } catch (error) {
    console.error("Error parsing witness data:", error);
    return null;
  }
};

/**
 * Convert witness signature hex to bytes
 * @param sigHex Signature hex string
 * @returns Signature bytes or null
 */
export const getSignatureBytes = (sigHex: string): number[] | null => {
  try {
    return hexToBytes(sigHex);
  } catch (error) {
    console.error("Error converting signature hex to bytes:", error);
    return null;
  }
};

/**
 * Convert witness public key hex to bytes
 * @param pubKeyHex Public key hex string
 * @returns Public key bytes or null
 */
export const getPublicKeyBytes = (pubKeyHex: string): number[] | null => {
  try {
    return hexToBytes(pubKeyHex);
  } catch (error) {
    console.error("Error converting public key hex to bytes:", error);
    return null;
  }
};
