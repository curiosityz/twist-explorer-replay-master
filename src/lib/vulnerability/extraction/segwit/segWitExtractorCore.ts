
/**
 * Core functionality for extracting cryptographic data from SegWit transactions
 */
import { CryptographicPoint, Signature } from '@/types';
import { checkBitcoinLibsLoaded } from '@/lib/crypto/bitcoin-libs/check-status';
import { 
  extractWitnessDataFromTx, 
  parseWitnessData,
  parseSignatureBytes, 
  parsePublicKeyBytes 
} from './utils/parseWitness';
import { extractWitnessSignature } from './utils/signatureExtraction';
import { extractWitnessPublicKey } from './utils/publicKeyExtraction';

/**
 * Core function to extract cryptographic data from segwit witness data
 * @param witnessData Array of witness data from transaction
 * @returns Extracted signature and public key or null
 */
export const extractSegWitDataCore = (
  witnessData: string[]
): { signature: Signature, publicKey: CryptographicPoint } | null => {
  try {
    // Check if libraries are loaded
    const libsCheck = checkBitcoinLibsLoaded();
    if (!libsCheck.loaded) {
      console.error(`Bitcoin libraries not loaded: Missing ${libsCheck.missing.join(', ')}`);
      throw new Error(`Bitcoin libraries not loaded: Missing ${libsCheck.missing.join(', ')}`);
    }
    
    if (!witnessData || witnessData.length < 2) {
      console.log("Insufficient witness data");
      return null;
    }
    
    // Log the witness data for debugging
    console.log("Processing witness data:", witnessData);
    
    // Parse witness data to get signature and public key hex
    const parsedWitness = parseWitnessData(witnessData);
    if (!parsedWitness) {
      console.log("Failed to parse witness data");
      return null;
    }
    
    const { sigHex, pubKeyHex } = parsedWitness;
    
    // Parse signature bytes
    const sigBytes = parseSignatureBytes(sigHex);
    if (!sigBytes) {
      console.log("Failed to parse signature bytes");
      return null;
    }
    
    // Extract signature
    const signature = extractWitnessSignature(sigBytes);
    if (!signature) {
      console.log("Failed to extract signature");
      return null;
    }
    
    // Parse public key bytes
    const pubKeyBytes = parsePublicKeyBytes(pubKeyHex);
    if (!pubKeyBytes) {
      console.log("Failed to parse public key bytes");
      return null;
    }
    
    // Extract public key
    const publicKey = extractWitnessPublicKey(pubKeyBytes);
    if (!publicKey) {
      console.log("Failed to extract public key");
      return null;
    }
    
    console.log("Successfully extracted signature and public key from witness data");
    return { signature, publicKey };
  } catch (error) {
    console.error("Error extracting SegWit data:", error);
    return null;
  }
};

/**
 * Extract cryptographic data from a SegWit transaction
 * @param txData Transaction data from blockchain API
 * @returns Object with signature and public key or null
 */
export const extractSegWitData = (txData: any): { signature: Signature, publicKey: CryptographicPoint } | null => {
  try {
    // Extract witness data from transaction
    const witnessData = extractWitnessDataFromTx(txData);
    if (!witnessData) {
      console.log("No witness data found in transaction");
      return null;
    }
    
    // Process the witness data
    return extractSegWitDataCore(witnessData);
  } catch (error) {
    console.error("Error in segwit extraction:", error);
    return null;
  }
};
