
/**
 * Core functionality for extracting cryptographic data from SegWit transactions
 */

import { Signature, CryptographicPoint } from '@/types';
import { extractWitnessDataFromTx, parseWitnessData, getSignatureBytes, getPublicKeyBytes } from './utils/parseWitness';
import { extractWitnessSignature } from './utils/signatureExtraction';
import { extractWitnessPublicKey } from './utils/publicKeyExtraction';

/**
 * Structure for cryptographic data
 */
interface CryptographicData {
  signature: Signature;
  publicKey: CryptographicPoint;
  rawSignature: string;
  rawPublicKey: string;
  transactionFormat: string;
}

/**
 * Extract cryptographic data from SegWit transaction
 * @param txData Transaction data
 * @returns CryptographicData with signature and public key, or null if extraction fails
 */
export const extractSegWitData = (txData: any): CryptographicData | null => {
  try {
    console.log("Starting SegWit data extraction");
    
    // Get witness data from transaction
    const witnessData = extractWitnessDataFromTx(txData);
    if (!witnessData) {
      console.error("No witness data found in transaction");
      return null;
    }
    
    console.log("Found witness data:", witnessData);
    
    // Parse signature and public key from witness data
    const parsedData = parseWitnessData(witnessData);
    if (!parsedData) {
      console.error("Failed to parse witness data");
      return null;
    }
    
    // Extract bytes from hex strings
    const sigBytes = getSignatureBytes(parsedData.sigHex);
    const pubKeyBytes = getPublicKeyBytes(parsedData.pubKeyHex);
    
    if (!sigBytes || !pubKeyBytes) {
      console.error("Failed to convert hex to bytes");
      return null;
    }
    
    console.log("Successfully converted signature and pubkey to bytes");
    
    // Extract signature data
    const signature = extractWitnessSignature(sigBytes);
    if (!signature) {
      console.error("Failed to extract witness signature");
      return null;
    }
    
    // Extract public key data
    const publicKey = extractWitnessPublicKey(pubKeyBytes);
    if (!publicKey) {
      console.error("Failed to extract witness public key");
      return null;
    }
    
    console.log("Successfully extracted SegWit cryptographic data:", {
      signature: { r: signature.r.substring(0, 10) + '...', s: signature.s.substring(0, 10) + '...' },
      publicKey: { x: publicKey.x.substring(0, 10) + '...', y: publicKey.y.substring(0, 10) + '...' }
    });
    
    // Return the extracted data
    return {
      signature,
      publicKey,
      rawSignature: parsedData.sigHex,
      rawPublicKey: parsedData.pubKeyHex,
      transactionFormat: 'segwit'
    };
  } catch (error) {
    console.error("Error in SegWit data extraction:", error);
    return null;
  }
};
