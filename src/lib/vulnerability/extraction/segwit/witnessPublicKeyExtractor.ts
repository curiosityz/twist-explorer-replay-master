
/**
 * Extract public keys from SegWit witness data
 */

import { CryptographicPoint } from '@/types';
import { bytesToHex } from '../hexUtils';

/**
 * Extract public key from SegWit witness data
 * @param pubKeyBytes Public key bytes from witness stack
 * @returns Extracted public key point or null
 */
export const extractWitnessPublicKey = (pubKeyBytes: Uint8Array | number[]): CryptographicPoint | null => {
  try {
    // Ensure we have a Uint8Array
    const keyBytes = pubKeyBytes instanceof Uint8Array ? 
      pubKeyBytes : new Uint8Array(pubKeyBytes);
    
    // Uncompressed public key (04 + x(32) + y(32))
    if (keyBytes.length === 65 && keyBytes[0] === 0x04) {
      const xBytes = keyBytes.slice(1, 33);
      const yBytes = keyBytes.slice(33);
      
      return {
        x: bytesToHex(xBytes),
        y: bytesToHex(yBytes),
        isOnCurve: true // We'll verify this later
      };
    }
    
    // Compressed public key (02/03 + x(32))
    if (keyBytes.length === 33 && (keyBytes[0] === 0x02 || keyBytes[0] === 0x03)) {
      // Try to use secp256k1 library to decompress
      if (window.secp256k1 && window.secp256k1.publicKeyConvert) {
        try {
          const decompressed = window.secp256k1.publicKeyConvert(keyBytes);
          const xBytes = decompressed.slice(1, 33);
          const yBytes = decompressed.slice(33);
          
          return {
            x: bytesToHex(xBytes),
            y: bytesToHex(yBytes),
            isOnCurve: true
          };
        } catch (error) {
          console.error("Error decompressing using secp256k1:", error);
          // Fall through to other methods
        }
      }
      
      // For compressed keys where we can't decompress yet, store the compression prefix
      // and x coordinate. We'll decompress later.
      const prefix = keyBytes[0] === 0x02 ? "even_y" : "odd_y";
      return {
        x: bytesToHex(keyBytes.slice(1)),
        y: prefix,
        isOnCurve: true
      };
    }
    
    console.error("Unsupported public key format or length:", keyBytes.length);
    return null;
  } catch (error) {
    console.error("Error extracting witness public key:", error);
    return null;
  }
};
