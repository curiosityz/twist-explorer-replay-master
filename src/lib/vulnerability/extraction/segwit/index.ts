
/**
 * Segwit transaction data extraction utilities
 */

import { parseWitnessData, getSignatureBytes, getPublicKeyBytes } from './witnessParser';
import { extractWitnessSignature } from './witnessSignatureExtractor';
import { extractWitnessPublicKey } from './witnessPublicKeyExtractor';
import { decodeDERSignature } from '@/lib/crypto/signatureUtils';
import { decompressPublicKey } from '@/lib/crypto/publicKeyUtils';

/**
 * Extract cryptographic data from a SegWit transaction
 * @param txData Transaction data from blockchain API
 * @returns Object with public key and signature if found, null otherwise
 */
export const extractSegWitData = (txData: any) => {
  try {
    // Check if the transaction has witness data
    if (!txData || !txData.vin || !Array.isArray(txData.vin) || txData.vin.length === 0) {
      console.log("No inputs in transaction data");
      return null;
    }
    
    let witnessData = null;
    
    // Find the first input with witness data
    for (const vin of txData.vin) {
      if (vin.witness && Array.isArray(vin.witness) && vin.witness.length >= 2) {
        witnessData = vin.witness;
        break;
      }
      
      // Some APIs use txinwitness instead of witness
      if (vin.txinwitness && Array.isArray(vin.txinwitness) && vin.txinwitness.length >= 2) {
        witnessData = vin.txinwitness;
        break;
      }
    }
    
    if (!witnessData) {
      console.log("No witness data found in transaction");
      return null;
    }
    
    // Parse witness data to extract signature and public key
    const parsedWitness = parseWitnessData(witnessData);
    if (!parsedWitness) {
      return null;
    }
    
    // Convert signature from hex to bytes
    const sigBytes = getSignatureBytes(parsedWitness.sigHex);
    if (!sigBytes) {
      return null;
    }
    
    // Convert public key from hex to bytes
    const pubKeyBytes = getPublicKeyBytes(parsedWitness.pubKeyHex);
    if (!pubKeyBytes) {
      return null;
    }
    
    // Process signature
    const signature = extractWitnessSignature(sigBytes);
    if (!signature) {
      return null;
    }
    
    // Process public key
    const publicKey = extractWitnessPublicKey(pubKeyBytes);
    if (!publicKey) {
      return null;
    }
    
    // Return the extracted data
    return { publicKey, signature };
  } catch (error) {
    console.error("Error extracting SegWit data:", error);
    return null;
  }
};
