
/**
 * Main export for SegWit extraction functionality
 */

import { CryptographicPoint, Signature } from '@/types';
import { parseWitnessData, getSignatureBytes, getPublicKeyBytes } from './witnessParser';
import { extractWitnessSignature } from './witnessSignatureExtractor';
import { extractWitnessPublicKey } from './witnessPublicKeyExtractor';

/**
 * Extract cryptographic data from segwit witness data
 * @param witnessData Array of witness data from transaction
 * @returns Extracted signature and public key or null
 */
export const extractSegWitData = (witnessData: string[]): { signature: Signature, publicKey: CryptographicPoint } | null => {
  try {
    // Parse and validate the witness data
    const parsedWitness = parseWitnessData(witnessData);
    if (!parsedWitness) {
      return null;
    }
    
    const { sigHex, pubKeyHex } = parsedWitness;
    
    // Convert hex to bytes
    const sigBytes = getSignatureBytes(sigHex);
    if (!sigBytes) {
      console.error("Failed to convert signature hex to bytes");
      return null;
    }
    
    const pubKeyBytes = getPublicKeyBytes(pubKeyHex);
    if (!pubKeyBytes) {
      console.error("Failed to convert public key hex to bytes");
      return null;
    }
    
    // Extract signature from witness
    const signature = extractWitnessSignature(sigBytes, sigHex);
    if (!signature) {
      console.error("Failed to extract signature from witness data");
      return null;
    }
    
    // Extract public key from witness
    const publicKey = extractWitnessPublicKey(pubKeyBytes, pubKeyHex);
    if (!publicKey) {
      console.error("Failed to extract public key from witness data");
      return null;
    }
    
    return { signature, publicKey };
  } catch (error) {
    console.error("Error extracting SegWit data:", error);
    return null;
  }
};
