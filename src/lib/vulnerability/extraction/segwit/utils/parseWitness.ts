
/**
 * Utilities for parsing SegWit witness data
 */
import { hexToBytes, bytesToHex } from '../../hexUtils';
import { checkBitcoinLibsLoaded } from '@/lib/crypto/bitcoin-libs/check-status';

/**
 * Extract the witness data array from a transaction
 * @param txData Transaction data from blockchain API
 * @returns Array of witness data or null if not found
 */
export const extractWitnessDataFromTx = (txData: any): string[] | null => {
  try {
    // Check if the transaction has witness data
    if (!txData || !txData.vin || !Array.isArray(txData.vin) || txData.vin.length === 0) {
      console.log("No inputs in transaction data");
      return null;
    }
    
    let witnessData = null;
    
    // Find the first input with witness data
    for (const vin of txData.vin) {
      if (vin.witness && Array.isArray(vin.witness) && vin.witness.length >= 2) {
        witnessData = vin.witness;
        break;
      }
      
      // Some APIs use txinwitness instead of witness
      if (vin.txinwitness && Array.isArray(vin.txinwitness) && vin.txinwitness.length >= 2) {
        witnessData = vin.txinwitness;
        break;
      }
    }
    
    return witnessData;
  } catch (error) {
    console.error("Error extracting witness data from transaction:", error);
    return null;
  }
};

/**
 * Parse witness data from a transaction input
 * @param witnessData Witness data array from transaction
 * @returns Object containing signature and public key hex, or null if invalid
 */
export const parseWitnessData = (witnessData: string[] | any[]): { sigHex: string, pubKeyHex: string } | null => {
  try {
    if (!witnessData || !Array.isArray(witnessData) || witnessData.length < 2) {
      console.log("Invalid witness data format");
      return null;
    }
    
    // In SegWit P2WPKH, the witness stack has two items:
    // [0] = Signature (with sighash byte)
    // [1] = Public key
    const sigHex = witnessData[0];
    const pubKeyHex = witnessData[1];
    
    if (!sigHex || !pubKeyHex || typeof sigHex !== 'string' || typeof pubKeyHex !== 'string') {
      console.log("Invalid signature or public key in witness data");
      return null;
    }
    
    return { sigHex, pubKeyHex };
  } catch (error) {
    console.error("Error parsing witness data:", error);
    return null;
  }
};

/**
 * Parse signature bytes from witness data
 * @param sigHex Signature hex string from witness
 * @returns Uint8Array of signature bytes or null if invalid
 */
export const parseSignatureBytes = (sigHex: string): Uint8Array | null => {
  try {
    if (!sigHex || sigHex.length < 10) {
      console.log("Invalid signature hex in witness data");
      return null;
    }
    
    return hexToBytes(sigHex);
  } catch (error) {
    console.error("Error parsing signature bytes:", error);
    return null;
  }
};

/**
 * Parse public key bytes from witness data
 * @param pubKeyHex Public key hex string from witness
 * @returns Uint8Array of public key bytes or null if invalid
 */
export const parsePublicKeyBytes = (pubKeyHex: string): Uint8Array | null => {
  try {
    if (!pubKeyHex || pubKeyHex.length < 10) {
      console.log("Invalid public key hex in witness data");
      return null;
    }
    
    return hexToBytes(pubKeyHex);
  } catch (error) {
    console.error("Error parsing public key bytes:", error);
    return null;
  }
};

/**
 * Get signature bytes from hex string
 * @param sigHex Signature hex string
 * @returns Uint8Array of signature bytes
 */
export const getSignatureBytes = (sigHex: string): Uint8Array | null => {
  try {
    if (!sigHex || typeof sigHex !== 'string') {
      return null;
    }
    return hexToBytes(sigHex);
  } catch (error) {
    console.error("Error converting signature hex to bytes:", error);
    return null;
  }
};

/**
 * Get public key bytes from hex string
 * @param pubKeyHex Public key hex string
 * @returns Uint8Array of public key bytes
 */
export const getPublicKeyBytes = (pubKeyHex: string): Uint8Array | null => {
  try {
    if (!pubKeyHex || typeof pubKeyHex !== 'string') {
      return null;
    }
    return hexToBytes(pubKeyHex);
  } catch (error) {
    console.error("Error converting public key hex to bytes:", error);
    return null;
  }
};
